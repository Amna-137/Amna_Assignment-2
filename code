# note: the code and how it sorted in files can be seen by clicking on the branches 
class Guest:
    """Guest class to store information about hotel guests."""

    def __init__(self, name, email, phone, loyalty_status="Regular"):
        """Initialize a guest with personal information"""
        self.__name = name
        self.__email = email
        self.__phone = phone
        self.__loyalty_status = loyalty_status

    # Getter methods
    def get_name(self):

        return self.__name

    def get_email(self):

        return self.__email

    def get_phone(self):

        return self.__phone

    def get_loyalty_status(self):

        return self.__loyalty_status

    # Setter methods
    def set_name(self, name):

        self.__name = name

    def set_email(self, email):

        self.__email = email

    def set_phone(self, phone):

        self.__phone = phone

    def set_loyalty_status(self, status):

        self.__loyalty_status = status


    def create_account(self):
        print(f"Account created for {self.__name}")
        return True

    def update_profile(self):
        print(f"Profile updated for {self.__name}")
        return True

    def view_reservation_history(self):
        history = f"Reservation history for {self.__name}"
        return history

    def __str__(self):
        return f"Guest: {self.__name}, Email: {self.__email}, Phone: {self.__phone}, Status: {self.__loyalty_status}"

class Room:
    """Room class to manage hotel rooms."""

    def __init__(self, room_number, room_type, price_per_night, amenities):
        self.__room_number = room_number
        self.__type = room_type
        self.__price_per_night = price_per_night
        self.__amenities = amenities

    # Getter methods
    def get_room_number(self):
        return self.__room_number

    def get_type(self):
        return self.__type

    def get_price_per_night(self):
        return self.__price_per_night

    def get_amenities(self):
        return self.__amenities

    # Setter methods
    def set_type(self, room_type):
        self.__type = room_type

    def set_price_per_night(self, price):
        self.__price_per_night = price

    def set_amenities(self, amenities):
        self.__amenities = amenities


    def check_availability(self):
        """Check if room is available"""
        return True

    def get_room_details(self):
        """Get detailed information about room"""
        details = f"Room {self.__room_number}, Type: {self.__type}, Price: ${self.__price_per_night}"
        return details

    def update_status(self, status):
        """Update room status (example: occupied, maintenance)"""
        print(f"Room {self.__room_number} status updated to {status}")
        return True

    def get_amenities(self):
        return self.__amenities

    def __str__(self):
        return f"Room {self.__room_number}: {self.__type}, ${self.__price_per_night}/night, Amenities: {self.__amenities}"

class Booking:
    """Booking class to manage hotel reservations."""

    def __init__(self, booking_id, guest, room, check_in_date, check_out_date, status="Confirmed"):
        self.__booking_id = booking_id
        self.__guest = guest
        self.__room = room
        self.__check_in_date = check_in_date
        self.__check_out_date = check_out_date
        self.__status = status

    # Getter methods
    def get_booking_id(self):
        return self.__booking_id

    def get_guest(self):
        return self.__guest

    def get_room(self):
        return self.__room

    def get_check_in_date(self):
        return self.__check_in_date

    def get_check_out_date(self):
        return self.__check_out_date

    def get_status(self):
        return self.__status

    # Setter methods
    def set_check_in_date(self, date):
        self.__check_in_date = date

    def set_check_out_date(self, date):
        self.__check_out_date = date

    def set_status(self, status):
        self.__status = status


    def create_booking(self):
        """Create a new booking"""
        print(f"Booking created: ID {self.__booking_id}")
        return True

    def cancel_booking(self):
        """Cancel an existing booking"""
        self.__status = "Cancelled"
        print(f"Booking {self.__booking_id} has been cancelled")
        return True

    def modify_booking(self):
        """Modify booking details"""
        print(f"Booking {self.__booking_id} has been modified")
        return True

    def generate_invoice(self):
        """Generate invoice for the booking"""
        from invoice import Invoice
        invoice = Invoice(self.__booking_id, self.__guest, self.__room,
                          self.__check_in_date, self.__check_out_date)
        return invoice

    def __str__(self):
        return (f"Booking {self.__booking_id}: Guest {self.__guest.get_name()}, "
                f"Room {self.__room.get_room_number()}, Check-in: {self.__check_in_date}, "
                f"Check-out: {self.__check_out_date}, Status: {self.__status}")


class Payment:
    """Payment class to handle financial transactions."""

    def __init__(self, payment_id, amount, payment_method):
        self.__payment_id = payment_id
        self.__amount = amount
        self.__payment_method = payment_method

    # Getter methods
    def get_payment_id(self):
        return self.__payment_id

    def get_amount(self):
        return self.__amount

    def get_payment_method(self):
        return self.__payment_method

    # Setter methods
    def set_amount(self, amount):
        self.__amount = amount

    def set_payment_method(self, method):
        self.__payment_method = method


    def process_payment(self):
        """Process the payment """
        print(f"Payment {self.__payment_id} processed: ${self.__amount} via {self.__payment_method}")
        return True

    def apply_discount(self, discount_percent):
        """Apply discount to payment"""
        if 0 <= discount_percent <= 100:
            self.__amount = self.__amount * (1 - discount_percent / 100)
            print(f"Discount of {discount_percent}% applied. New amount: ${self.__amount}")
            return True
        return False

    def get_receipt(self):
        """Generate receipt for payment"""
        receipt = f"Receipt: Payment ID {self.__payment_id}, Amount: ${self.__amount}, Method: {self.__payment_method}"
        return receipt

    def __str__(self):
        return f"Payment {self.__payment_id}: ${self.__amount} via {self.__payment_method}"

class Invoice:
    """Invoice class to manage billing information."""

    def __init__(self, invoice_id, guest, room, check_in_date, check_out_date):
        self.__invoice_id = invoice_id
        self.__guest = guest
        self.__room = room
        self.__check_in_date = check_in_date
        self.__check_out_date = check_out_date
        self.__payment_details = None

    # Getter methods
    def get_invoice_id(self):
        return self.__invoice_id

    def get_payment_details(self):
        return self.__payment_details

    # Setter methods
    def set_payment_details(self, payment):
        self.__payment_details = payment


    def generate_invoice(self):
        """Generate the invoice document"""
        print(f"Invoice {self.__invoice_id} generated for guest {self.__guest.get_name()}")
        return True

    def __str__(self):
        """String representation of invoice"""
        if self.__payment_details:
            payment_info = f", Payment: ${self.__payment_details.get_amount()}"
        else:
            payment_info = ", Payment: Pending"

        return (f"Invoice {self.__invoice_id}: Guest {self.__guest.get_name()}, "
                f"Room {self.__room.get_room_number()}, "
                f"Period: {self.__check_in_date} to {self.__check_out_date}{payment_info}")
class LoyaltyProgram:
    """LoyaltyProgram class to manage guest rewards and benefits."""

    def __init__(self, guest, points=0, member_since=None):
        self.__guest = guest
        self.__points = points
        self.__member_since = member_since

    # Getter methods
    def get_guest(self):
        return self.__guest

    def get_points(self):
        """Return loyalty points"""
        return self.__points

    def get_member_since(self):
        return self.__member_since

    # Setter methods
    def set_points(self, points):
        self.__points = points

    def set_member_since(self, date):
        self.__member_since = date


    def earn_points(self, amount):
        """Add points to loyalty account"""
        prev_points = self.__points
        self.__points += amount
        print(f"Points added: {amount}. New balance: {self.__points}")
        return self.__points

    def redeem_points(self, points_to_redeem):
        """Redeem points for benefits"""
        if points_to_redeem <= self.__points:
            self.__points -= points_to_redeem
            print(f"Redeemed {points_to_redeem} points. Remaining: {self.__points}")
            return True
        else:
            print("Insufficient points")
            return False

    def check_status(self):
        """Check loyalty program status"""
        if self.__points < 500:
            status = "Silver"
        elif self.__points < 1000:
            status = "Gold"
        else:
            status = "Platinum"

        return f"Status: {status}, Points: {self.__points}, Member since: {self.__member_since}"

    def __str__(self):
        return f"Loyalty Program : {self.__guest.get_name()}, Points: {self.__points}, Member since: {self.__member_since}"

class GuestService:
    """
    GuestService class to manage additional services for guests.
    """

    def __init__(self, service_id, booking, service_type, status="Pending"):
        """Initialize guest service with details"""
        self.__service_id = service_id
        self.__booking = booking
        self.__service_type = service_type
        self.__status = status

    # Getter methods
    def get_service_id(self):
        return self.__service_id

    def get_booking(self):
        return self.__booking

    def get_service_type(self):
        return self.__service_type

    def get_status(self):
        return self.__status

    # Setter methods
    def set_service_type(self, service_type):
        self.__service_type = service_type

    def set_status(self, status):
        self.__status = status


    def request_service(self):
        """Request a new service"""
        self.__status = "Requested"
        print(f"Service {self.__service_id} ({self.__service_type}) requested")
        return True

    def track_request(self):
        """Track the status of service request"""
        return f"Service {self.__service_id} status: {self.__status}"

    def cancel_request(self):
        """Cancel service request"""
        if self.__status != "Completed":
            self.__status = "Cancelled"
            print(f"Service {self.__service_id} cancelled")
            return True
        else:
            print("Cannot cancel completed service")
            return False

    def __str__(self):
        return f"Service {self.__service_id}: {self.__service_type}, Status: {self.__status}"

class Feedback:
    """ Feedback class to manage guest reviews and comments."""

    def __init__(self, booking, rating=None):
        self.__booking = booking
        self.__rating = rating
        self.__comments = []

    # Getter methods
    def get_booking(self):
        return self.__booking

    def get_rating(self):
        return self.__rating

    def get_comments(self):
        return self.__comments

    # Setter methods
    def set_rating(self, rating):
        if 1 <= rating <= 5:
            self.__rating = rating


    def submit_feedback(self, rating, comment=None):
        """Submit new feedback"""
        if 1 <= rating <= 5:
            self.__rating = rating
            if comment:
                self.__comments.append(comment)
            print(f"Feedback submitted: Rating {rating}/5")
            return True
        else:
            print("Invalid rating (must be 1-5)")
            return False

    def view_feedback(self):
        """View submitted feedback"""
        if self.__rating:
            comments_str = " | ".join(self.__comments) if self.__comments else "No comments provided"
            return f"Rating: {self.__rating}/5 - Comments: {comments_str}"
        else:
            return "No feedback submitted yet"

    def add_comment(self, comment):
        """Add comment to existing feedback"""
        self.__comments.append(comment)
        print("Comment added")
        return True

    def __str__(self):
        if self.__rating:
            return f"Feedback: Rating {self.__rating}/5, Comments: {len(self.__comments)}"
        else:
            return "Feedback: Not submitted yet"



from guest import Guest
from room import Room
from booking import Booking
from payment import Payment
from invoice import Invoice
from loyalty_program import LoyaltyProgram
from guest_service import GuestService
from feedback import Feedback

if __name__ == "__main__":
    # Test 1: Create guest accounts
    print("--- Guest Account Creation Tests ---")
    # Create first guest
    g1 = Guest("Amna Fahed", "amna.fahed.05@gmail.com", "0566497977")
    g1.create_account()
    print(g1)

    # Create second guest with Gold status
    g2 = Guest("Saeed Fahed", "saeed2002@gmail.com", "0505126677", "Gold")
    g2.create_account()
    print(g2)

    # Test 2: Search for rooms
    print("--- Room Search Tests ---")
    # Create some rooms
    r1 = Room(101, "Standard", 100.0, "WiFi, TV")
    r2 = Room(102, "Standard", 100.0, "WiFi, TV, Fridge")
    r3 = Room(201, "Deluxe", 200.0, "WiFi, TV, Fridge")
    r4 = Room(301, "Suite", 300.0, "WiFi, TV, Kitchen, Jacuzzi")

    # Search for standard rooms
    print("Standard rooms:")
    rooms = [r1, r2, r3, r4]
    for r in rooms:
        if r.get_type() == "Standard":
            print(r.get_room_details())

    # Search for rooms with fridge
    print("Rooms with fridge:")
    for r in rooms:
        if "Fridge" in r.get_amenities():
            print(r.get_room_details())

    # Test 3: Make room bookings
    print("--- Room Booking Tests ---")
    # Book room 1 for guest 1
    b1 = Booking(1001, g1, r1, "2024-05-01", "2024-05-03")
    b1.create_booking()
    print(b1)

    # Book room 3 for guest 2
    b2 = Booking(1002, g2, r3, "2024-06-01", "2024-06-05")
    b2.create_booking()
    print(b2)

    # Test 4: Confirm bookings
    print("--- Booking Confirmation Tests ---")
    # Confirm first booking
    b1.set_status("Confirmed")
    print(f"Booking 1 status: {b1.get_status()}")
    print(f"Email sent to: {g1.get_email()}")

    # Confirm second booking
    b2.set_status("Confirmed")
    print(f"Booking 2 status: {b2.get_status()}")
    print(f"Email sent to: {g2.get_email()}")

    # Test 5: Generate invoices
    print("--- Invoice Generation Tests ---")
    # Generate invoice for booking 1
    inv1 = b1.generate_invoice()
    print(inv1)

    # Generate invoice for booking 2
    inv2 = b2.generate_invoice()
    print(inv2)

    # Test 6: Process payments
    print("--- Payment Processing Tests ---")
    # Process credit card payment
    p1 = Payment(5001, 200.0, "Credit Card")
    p1.process_payment()
    inv1.set_payment_details(p1)
    print(p1)
    print(f"Receipt: {p1.get_receipt()}")

    # Process mobile payment with discount
    p2 = Payment(5002, 800.0, "Mobile Payment")
    p2.process_payment()
    p2.apply_discount(10)  # 10% discount
    inv2.set_payment_details(p2)
    print(p2)
    print(f"Receipt: {p2.get_receipt()}")

    # Test 7: View reservation history
    print("--- Reservation History Tests ---")
    # View history for guest 1
    print(g1.view_reservation_history())

    # View history for guest 2
    print(g2.view_reservation_history())

    # Test 8: Cancel reservations
    print("--- Reservation Cancellation Tests ---")
    # Cancel booking 1
    print(f"Before cancellation: {b1}")
    b1.cancel_booking()
    print(f"After cancellation: {b1}")
    r1.update_status("Available")

    # Cancel booking with refund
    b3 = Booking(1003, g2, r4, "2024-07-01", "2024-07-03")
    b3.create_booking()
    p3 = Payment(5003, 600.0, "Credit Card")
    p3.process_payment()
    b3.cancel_booking()
    print(f"Refund processed: ${p3.get_amount()}")
    r4.update_status("Available")

    # Error handling tests
    print("--- Error Handling Tests ---")

    # Test invalid rating
    print("1. Testing invalid rating:")
    fb = Feedback(b2)
    good_rating = fb.submit_feedback(5)  # Valid rating
    bad_rating = fb.submit_feedback(6)  # Invalid rating
    print(f"Valid rating result: {good_rating}")
    print(f"Invalid rating result: {bad_rating}")

    # Test insufficient points
    print("2. Testing loyalty points:")
    lp = LoyaltyProgram(g1, 100, "2024-01-01")
    enough = lp.redeem_points(50)  # Should work
    not_enough = lp.redeem_points(200)  # Should fail
    print(f"Redeem 50 points result: {enough}")
    print(f"Redeem 200 points result: {not_enough}")

    # Test cancelling completed service
    print("3. Testing service cancellation:")
    service = GuestService(101, b2, "Room Service")
    service.request_service()
    service.set_status("Completed")
    cancel_result = service.cancel_request()
    print(f"Cancel completed service result: {cancel_result}")
